# Default to using the config file in the same respository as this 
# Snakefile. Alternatively, you can specify a different config file
# via commandline option `--configfile <path/to/config.yaml>`.
configfile: workflow.source_path('../config/config.yaml')

pepfile: config['input']['pepfile_path']

# Exclude forward slash in wildcards matching.
# (0) via setting allowed classes of characters
# (1) it's critical to set these regex constrains, to reduce chance of 
#     bad parsing for "ch1/UID1.ome.tif" with pattern 
#     "{ch}/{RoiUID}.ome.tif" to yield wildcard RoiUID = "ch1/UID1"
# (2) this should work globally, EXCEPT FOR inside an glob_wildcards() 
#     call where you need to specify manually! See [related issue](https://github.com/snakemake/snakemake/issues/1726) 
wildcard_constraints:
    RoiUID = "[\w-]+",
    ch = "[\w-]+",


def get_channel_names():
    channels = (pep.config['experiments']
                          [config['input']['experiment_type']]
                          ['channels'])
    return [c['fluoro'] for c in channels]

ALL_CH = get_channel_names()


def get_checkpoint_RoiUID(wildcards):
    checkpoints.crop_roi.get(**wildcards)
    return glob_wildcards("single_nuc_movie/{RoiUID, [\w-]+}.ome.tif").RoiUID


rule all:
    input:
        lambda w: expand("piv/{ch}/{RoiUID}.mat", 
                         ch=ALL_CH, 
                         RoiUID=get_checkpoint_RoiUID(w))


rule build_imagelist:
    output: 
        'imagesetlist.csv',
    script:
        "scripts/build_imagelist.py"

rule draw_roi:
    input: 
        'imagesetlist.csv',
    output:
        'roilist.csv'
    script:
        "scripts/draw_roi.py"

# Note:
#   Defining output by touching a file inside the desired output folder
#   (specified same as params.outdir) ensures that folder gets created.
#   This means that the script doesn't need to check/create by itself.
#   We also don't need to explicitly do mkdir before calling the script.
checkpoint crop_roi:
    input:
        'roilist.csv'
    output:
        touch("single_nuc_movie/.done")
    params:
        outdir = "single_nuc_movie"
    script:
        "scripts/crop_roi.py"


rule split_channels:
    input:
        "single_nuc_movie/{RoiUID}.ome.tif"
    output:
        expand("single_nuc_movie/{ch}/{RoiUID}.ome.tif", 
               ch=ALL_CH, allow_missing=True)
    script:
        "scripts/split_channels.py"


# Dummy rule to target post-checkpoint rule (`split_channels`, in this
# case).
# 
# Use this as target rule instead of the actual rule `split_channels"
# as functions are only allowed for input but not output. This way, we
# don't have to modify the `all` rule just to test or target other 
# rules post checkpoint.   
rule all_split_channels:
    input:
        lambda w: expand("single_nuc_movie/{ch}/{RoiUID}.ome.tif", 
                         ch=ALL_CH, 
                         RoiUID=get_checkpoint_RoiUID(w))


rule segment_nuclei_in_time:
    input:
        expand("single_nuc_movie/{ch}/{RoiUID}.ome.tif",
               ch=config['segment_nuclei_in_time']['channel'],
               allow_missing=True)
    output:
        "single_nuc_mask_movie/{RoiUID}.ome.tif"
    script:
        "scripts/segment_nuclei_in_time.py"


rule all_segment_nuclei:
    input:
        lambda w: expand("single_nuc_mask_movie/{RoiUID}.ome.tif", 
                         RoiUID=get_checkpoint_RoiUID(w))


rule piv:
    input:
        "single_nuc_movie/{ch}/{RoiUID}.ome.tif"
    output:
        "piv/{ch}/{RoiUID}.mat"
    params:
        protocol = config['piv']['protocol'],
        pivpkg = str(
            Path(workflow.current_basedir) /
            config['piv']['pkg_path']),
        mfiledir = str(Path(workflow.current_basedir) / "scripts"),
    envmodules:
        "matlab/R2019b"
    shell:
        # Note that in order for {input} {output} to still be relative
        # to dir where Snakemake is invoked, we need to start matlab
        # in the same directory (hence, `-sd <dir/to/launch>` doesn't 
        # fit). 
        """
        matlab -batch "addpath('{params.mfiledir}', genpath('{params.pivpkg}')); {params.protocol}('{input}', '{output}')"
        """